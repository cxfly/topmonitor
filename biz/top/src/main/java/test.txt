TopClient接口调用监控功能：


调用前：
 判断是否满足以下两个条件,满足调用,否则,更新状态/日志入库后退出本次执行
  (同步渠道订单任务是由belfry定时触发，产生异步任务表记录，之后再由异步任务调度程序NotifyScheduledMainExecutor执行).
1. 接口调用次数阀值控制(topClient每天调用次数有限制,超过调用次数不再继续调用,第二天后再次发起接口调用).
2. sessionKey失效校验(失效后不再调用,重新申请,申请成功后再次发起接口调用).

调用后：
1. 更新当日调用总次数.
2. 记录调用结果信息.

TopClient接口调用特点：
1. 高并发
2. 分布式
3. 大数据量
4. 调用失败次数占总调用次数的比例很小

日志记录优化方向：
1. 接口调用性能(频繁读写db--->优化db访问方式)
2. 数据量(记录关键的日志/关注的内容---->记录特定类型日志/优化表结构)

topClient接口调用监控方式：
1. 直接操作数据库.
	执行前: 立即从db中获取当日调用总次数.
	执行后: 立即将监控日志写入db.
优点：实现简单，利用数据库作为数据共享桥梁，各台服务器间数据保持一致.
缺点: 频繁访问数据库,需锁定表记录保持服务器间访问数据的同步,性能比较低.	


2. 接口调用日志暂存至内存，然后再异步定时批量更新至数据库.(memory + DB),
	执行前: 获取当日调用总次数,总次数保存在内存中,直接从内存中获取.
	执行后: 立即将监控日志写入db.
优点：获取当日调用总次数/记录日志至db的性能和效率提高了
缺点: 在各服务器间采用广播形式进行数据同步,并发不易控制


3. 不过将总记录数保存至db,避免多台服务器之间广播同步数据.


4. 采用分库的形式,当日调用总次数从db中获取.接口调用日志暂存至内存，然后再异步定时批量更新至数据库.(memory + DB)
	由于接口调用日志比较只作为统计用，不会关联其它业务数据，所以将接口调用监控日志数据保存的数据库与
	物流业务数据库分开,独立使用,这样既方便统计又不会占用业务数据库的资源.


接口调用日志记录简化
1. 只记录特定的数据(调用失败的记录/指定类型的接口调用).
2. 表结构(字段定义时，只考虑关注的数据).
3. 记录内容精简，一些内容较多的信息使用代码替换，查询的时候，再根据代码到实际值之间的映射，转义成实际的内容.

数据暂时保存在内存中，根据记录规则(成功调用n次)或由定时任务将内存中的数据刷新至DB，这样可以减少
对db的访问压力.
-----------------------------------------------------------------------------------


-----------------------------------------------------------------------------------


1. 记录每次调用的详细日志,不论调用成功或失败情况.
2. 异步处理,采用队列形式缓存日志
3. 由单独线程间隔消费队列中的数据,调用存储api,进行日志记录.


预估3天左右
1.日志记录模型确定.0d
2.日志异步处理设计.0.5d
3.AOP处理框架/队列消费者线程实现/日志模型编码. 1.5天左右
4.日志存储API接口.
5.单元测试/接口联调. 1天



a.目前的aop处理模型仅实现top接口调用日志,ocean日志
b.队列处理模型,线程启动时机.
c.日志模型(baseLog/topLog)
d.mongoDB存储服务类接口(map),mongoDB跟dba确定
e.开发时间



















